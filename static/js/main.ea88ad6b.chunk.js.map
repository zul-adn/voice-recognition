{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","setIsTalk","words","setWords","msg","recog","window","speechRecognition","webkitSpeechRecognition","getBot","texts","text","axios","post","then","res","console","log","onstart","onresult","event","current","resultIndex","message","results","transcript","readIttLoud","push","speech","SpeechSynthesisUtterance","volume","rate","pitch","speechSynthesis","speak","className","length","map","v","i","is_user","size","color","onClick","start","type","value","placeholder","onChange","e","target","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qOAAe,I,oCCwHAA,MAlHf,WAAgB,IAAD,EAEeC,IAAMC,UAAS,GAF9B,mBAEEC,GAFF,aAGaF,IAAMC,SAAS,IAH5B,mBAGNE,EAHM,KAGCC,EAHD,OAISJ,IAAMC,SAAS,IAJxB,mBAINI,EAJM,KAOPC,GAPO,KAOC,IADYC,OAAOC,mBAAqBD,OAAOE,0BAOvDC,EAAS,SAACC,GACd,IAAMC,EAAO,CACX,KAASD,GAEXE,IAAMC,KAAK,mDAAoDF,GAC9DG,MAAK,SAAAC,GACJC,QAAQC,IAAIF,OAKhBV,EAAMa,QAAU,WACdF,QAAQC,IAAI,sBACZhB,GAAU,IAGZI,EAAMc,SAAW,SAAUC,GAEzB,IAAMC,EAAUD,EAAME,YAChBC,EAAUH,EAAMI,QAAQH,GAAS,GAAGI,WAC1CtB,EAASoB,GACTG,EAAYH,GACZtB,GAAU,GACVG,EAAIuB,KAAK,CAAC,SAAW,EAAM,KAAQJ,IACnCd,EAAOc,GACLpB,EAAS,KAGb,IAAMuB,EAAc,SAACH,GAEnB,IAAMK,EAAS,IAAIC,yBACnBD,EAAOjB,KAAOY,EACdK,EAAOE,OAAS,EAChBF,EAAOG,KAAO,EACdH,EAAOI,MAAQ,EAEf1B,OAAO2B,gBAAgBC,MAAMN,IAW/B,OACE,sBAAKO,UAAU,YAAf,UAIE,qBAAKA,UAAU,WAAf,SACE,qBAAKA,UAAU,mBAAf,SAEkB,IAAf/B,EAAIgC,OACH,aAEAhC,EAAIiC,KAAI,SAACC,EAAGC,GAAJ,OACND,EAAEE,QACF,sBAAKL,UAAU,UAAf,UACE,qBAAKA,UAAU,oBAGf,qBAAKA,UAAU,mBAAf,SACE,+BAAOG,EAAE3B,YAIb,sBAAKwB,UAAU,SAAf,UAEE,qBAAKA,UAAU,oBAAf,SACE,+BAAOG,EAAE3B,SAEX,qBAAKwB,UAAU,+BAWzB,sBAAKA,UAAU,WAAf,UACE,qBAAKA,UAAU,gBAAf,SACE,cAAC,IAAD,CAAcM,KAAM,GAAIC,MAAM,MAAMC,QA3F9B,WACZtC,EAAMuC,aA4FF,qBAAKT,UAAU,kBAAf,SACE,uBAAOU,KAAK,OAAOC,MAAO5C,EAAO6C,YAAY,0BAA0BC,SAAU,SAACC,GAAD,OAAO9C,EAAS8C,EAAEC,OAAOJ,YAE5G,qBAAKX,UAAU,mBAAf,SACE,wBAAQQ,QAtDK,WACnB3B,QAAQC,IAAIb,GACZA,EAAIuB,KAAK,CAAC,SAAW,EAAM,KAAQzB,IACnCO,EAAOP,GACPC,EAAS,KAkDH,SAA+B,cAAC,IAAD,CAAQsC,KAAM,GAAIC,MAAM,qBCpGlDS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBvC,MAAK,YAAkD,IAA/CwC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.ea88ad6b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport { FaPlay, FaMicrophone } from \"react-icons/fa\";\nimport axios from 'axios'\n\nfunction App() {\n\n  const [isTalk, setIsTalk] = React.useState(false)\n  const [words, setWords] = React.useState('')\n  const [msg, setMsg] = React.useState([])\n\n  const SpeechRecognition = window.speechRecognition || window.webkitSpeechRecognition;\n  const recog = new SpeechRecognition()\n\n  const start = () => {\n    recog.start()\n  }\n\n  const getBot = (texts) => {\n    const text = {\n      'text' : texts\n    }\n    axios.post('https://tegiai-gi4coglcca-de.a.run.app/add_input', text)\n    .then(res => {\n      console.log(res)\n    })\n  }\n  \n\n  recog.onstart = function () {\n    console.log(\"Voice is activated\")\n    setIsTalk(true)\n  }\n\n  recog.onresult = function (event) {\n\n    const current = event.resultIndex;\n    const message = event.results[current][0].transcript\n    setWords(message)\n    readIttLoud(message)\n    setIsTalk(false)\n    msg.push({'is_user': true, \"text\": message})\n    getBot(message)\n      setWords('')\n  }\n\n  const readIttLoud = (message) => {\n\n    const speech = new SpeechSynthesisUtterance();\n    speech.text = message;\n    speech.volume = 1;\n    speech.rate = 1;\n    speech.pitch = 1;\n\n    window.speechSynthesis.speak(speech)\n  }\n\n  const sendquestion = () => {\n    console.log(msg)\n    msg.push({'is_user': true, \"text\": words})\n    getBot(words)\n    setWords('')\n  }\n\n\n  return (\n    <div className=\"container\">\n      {/* <button className=\"btn\" onClick={start}  disabled = {isTalk} ><BiMicrophone size={60} color=\"white\" /></button>\n      <h3 style={{ color:'#636e72' }}> {isTalk ? \"Talking...\" : \"Click button above to talk\"} </h3>\n      <h2>{words}</h2> */}\n      <div className=\"chat-box\">\n        <div className=\"ballon-container\">\n\n          {msg.length === 0 ?\n            \"No Message\"\n            :\n            msg.map((v, i) => \n              v.is_user ?\n              <div className=\"ballon \">\n                <div className=\"ballon-ava-left\">\n\n                </div>\n                <div className=\"ballon-text-left\">\n                  <span>{v.text}</span>\n                </div>\n              </div>\n              :\n              <div className=\"ballon\">\n\n                <div className=\"ballon-text-right\">\n                  <span>{v.text}</span>\n                </div>\n                <div className=\"ballon-ava-right\">\n\n                </div>\n              </div>\n\n            \n            )\n          }\n\n        </div>\n      </div>\n      <div className=\"text-box\">\n        <div className=\"rec-container\">\n          <FaMicrophone size={25} color=\"red\" onClick={start} />\n        </div>\n        <div className=\"input-container\">\n          <input type=\"text\" value={words} placeholder=\"Input your message here\" onChange={(e) => setWords(e.target.value)} />\n        </div>\n        <div className=\"button-container\">\n          <button onClick={sendquestion}><FaPlay size={15} color=\"white\" /></button>\n        </div>\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}